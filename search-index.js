var searchIndex = JSON.parse('{\
"dynomite":{"doc":"Dynomite is the set of high-level interfaces making …","t":[8,6,8,8,8,14,0,10,10,10,10,10,10,10,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Attribute","Attributes","FromAttributes","IntoAttributes","Item","attr_map","error","from_attr","from_attrs","into_attr","into_attrs","key","partition_key","sort_key","AttributeError","InvalidFormat","InvalidType","MissingField","borrow","borrow_mut","eq","fmt","fmt","from","into","ne","to_string","try_from","try_into","type_id","vzip","name"],"q":["dynomite","","","","","","","","","","","","","","dynomite::error","","","","","","","","","","","","","","","","","dynomite::error::AttributeError"],"d":["A type capable of being converted into an or from and AWS …","Type alias for map of named attribute values","A type capable of being produced from a set of string keys …","A type capable of being serialized into a set of string …","A type which can be converted to and from a set of String …","Creates a <code>HashMap&lt;String, AttributeValue&gt;</code> from a list of …","Dynomite error types","Returns a fallible conversion from an <code>AttributeValue</code>","Returns an instance of of a type resolved at runtime from …","Returns a conversion into an <code>AttributeValue</code>","Converts <code>self</code> into <code>Attributes</code> by accepting a <code>sink</code> argument …","Returns the set of attributes which make up this item’s …","Returns a tuple containing the name and value of the …","Returns a tuple containing the name and value of the sort …","Errors that may result of attribute value conversions","Will be returned if an AttributeValue is present, and is …","Will be returned if provided AttributeValue is not of the …","Will be returned if provided attributes does not included …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Name of the field that is missing"],"i":[0,0,0,0,0,0,0,1,2,1,3,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6],"f":[null,null,null,null,null,null,null,[[["attributevalue",4]],["result",4,[["attributeerror",4]]]],[[["attributes",6]],["result",4,[["attributeerror",4]]]],[[],["attributevalue",4]],[[["attributes",6]]],[[["",0]],["attributes",6]],[[["",0]]],[[["",0]],["option",4]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["attributeerror",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["attributeerror",4]],["bool",0]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null],"p":[[8,"Attribute"],[8,"FromAttributes"],[8,"IntoAttributes"],[8,"Item"],[4,"AttributeError"],[13,"MissingField"]]},\
"dynomite_derive":{"doc":"Provides procedural macros for deriving dynomite types for …","t":[24,24,24],"n":["Attribute","Attributes","Item"],"q":["dynomite_derive","",""],"d":["Derives <code>dynomite::Attribute</code> for enum types","similar in spirit to <code>#[derive(Item)]</code> except these are …","Derives <code>dynomite::Item</code> type for struts with named fields"],"i":[0,0,0],"f":[null,null,null],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};